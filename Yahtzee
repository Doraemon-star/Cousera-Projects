"""
Planner for Yahtzee
Simplifications:  only allow discard and roll, only score against upper level
"""

# Used to increase the timeout, if necessary
import codeskulptor
codeskulptor.set_timeout(20)

def gen_all_sequences(outcomes, length):
    """
    Iterative function that enumerates the set of all sequences of
    outcomes of given length.
    """
    
    answer_set = set([()])
    for dummy_idx in range(length):
        temp_set = set()
        for partial_sequence in answer_set:
            for item in outcomes:
                new_sequence = list(partial_sequence)
                new_sequence.append(item)
                temp_set.add(tuple(new_sequence))
        answer_set = temp_set
    return answer_set


def score(hand):
    """
    Compute the maximal score for a Yahtzee hand according to the
    upper section of the Yahtzee score card.

    hand: full yahtzee hand

    Returns an integer score 
    """
    max_value_dic = {}
    for dice_num in range(1,7):
        count = 0
        for num in hand:
            if num == dice_num:
                count += 1
            sum_num = count * dice_num
            max_value_dic[dice_num] = sum_num
                
    max_value = max(max_value_dic.values())    
    return max_value

def expected_value(held_dice, num_die_sides, num_free_dice):
    """
    Compute the expected value based on held_dice given that there
    are num_free_dice to be rolled, each with num_die_sides.

    held_dice: dice that you will hold
    num_die_sides: number of sides on each die
    num_free_dice: number of dice to be rolled

    Returns a floating point expected value
    """
    hand_list = []
    roll_outcomes = range(1,num_die_sides + 1)     
    all_rolls = gen_all_sequences(roll_outcomes, num_free_dice)
    max_value_list = []
    
    for roll in all_rolls:
        hand_list = []
        hand_list.extend(roll)  
        hand_list.extend(held_dice)
        max_value = score(hand_list)        
        max_value_list.append(max_value * 1.0 / len(all_rolls))           
    return sum(max_value_list)   
              
def gen_all_holds(hand):
    """
    Generate all possible choices of dice from hand to hold.

    hand: full yahtzee hand

    Returns a set of tuples, where each tuple is dice to hold
    """
    return set([()])

def strategy(hand, num_die_sides):
    """
    Compute the hold that maximizes the expected value when the
    discarded dice are rolled.

    hand: full yahtzee hand
    num_die_sides: number of sides on each die

    Returns a tuple where the first element is the expected score and
    the second element is a tuple of the dice to hold
    """
    return (0.0, ())

def run_example():
    """
    Compute the dice to hold and expected score for an example hand
    """
    num_die_sides = 6
    hand = (1, 1, 1, 5, 6)
    hand_score, hold = strategy(hand, num_die_sides)
    print "Best strategy for hand", hand, "is to hold", hold, "with expected score", hand_score
    
    
#run_example()
import user47_QNYed6h3tL_0 as testcode
#def test():
#    
#    test1 = testcode.TestSuite()
#    test1.run_test(expected_value((1,), 3, 1), 2.3, "The  value is")  
#    test1.run_test(expected_value((1,2), 3, 1), 3.0, "The  value is")
#    test1.run_test(expected_value((1,2), 3, 2), 4.1, "The  value is" + str(expected_value((1,2), 3, 2)))
#    test1.report_results()
#    
#test()
#import poc_holds_testsuite
#poc_holds_testsuite.run_suite(gen_all_holds)
                                       
    
    
    



